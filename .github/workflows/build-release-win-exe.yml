name: Build and Release Windows EXE

on:
  push:
    branches:
      - main
    paths:
      - '**/*.py'
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Get version
        id: get_version
        shell: pwsh
        run: |
          $content = Get-Content version_info.txt -Raw
          if ($content -match "ProductVersion', '([\d\.]+)'") { $version = $Matches[1] }
          "version=$version" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding UTF8 -Append

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Build EXE
        run: |
          pyinstaller --clean -F -n mcpcli --version-file version_info.txt mcp_chat_cli.py

      - name: Create ZIP
        shell: pwsh
        run: |
          Compress-Archive -Path "dist\\mcpcli\\*","README.md" -DestinationPath azuremcpcli-${{ steps.get_version.outputs.version }}.zip

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: azuremcpcli-${{ steps.get_version.outputs.version }}.zip
          asset_name: azuremcpcli-${{ steps.get_version.outputs.version }}.zip
          asset_content_type: application/zip
