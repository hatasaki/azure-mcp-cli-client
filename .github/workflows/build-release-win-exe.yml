name: Build and Release Windows EXE
permissions:
  contents: write
  packages: write

on:
  push:
    branches:
      - main
    paths:
      - '**/*.py'
  workflow_dispatch:

jobs:
  build:
    name: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v3
      - name: Get version
        id: get_version
        shell: pwsh
        run: |
          $content = Get-Content version_info.txt -Raw
          if ($content -match "ProductVersion', '([\d\.]+)'") { $version = $Matches[1] }
          "version=$version" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding UTF8 -Append

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Build EXE
        run: |
          # Conditionally include version-file on Windows
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            pyinstaller --clean -F -n mcpcli --version-file version_info.txt mcp_chat_cli.py
          else
            pyinstaller --clean -F -n mcpcli mcp_chat_cli.py
          fi

      - name: Create Package (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Compress-Archive -Path "dist\\mcpcli.exe","README.md","mcp.json.sample","mcp.json.template" `
            -DestinationPath azuremcpcli-windows-${{ steps.get_version.outputs.version }}.zip

      - name: Create Package (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          # Package Linux executable and samples
          tar -czvf azuremcpcli-linux-${{ steps.get_version.outputs.version }}.tar.gz -C dist mcpcli
          tar -rvf azuremcpcli-linux-${{ steps.get_version.outputs.version }}.tar.gz README.md mcp.json.sample mcp.json.template

      - name: Create Package (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          # Package macOS executable and samples
          tar -czvf azuremcpcli-macos-${{ steps.get_version.outputs.version }}.tar.gz -C dist mcpcli
          tar -rvf azuremcpcli-macos-${{ steps.get_version.outputs.version }}.tar.gz README.md mcp.json.sample mcp.json.template

